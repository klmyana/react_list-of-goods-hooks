{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","Default","sortType","setSortType","isReversed","setIsReverse","visibleGoods","goods","preparedGoods","sort","good1","good2","Alphabeth","localeCompare","Length","length","reverse","getPreparedGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,2BAAAA,E,gBAAAA,E,YAAAA,M,KAuCE,IAAME,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,SAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAmCH,oBAAS,GAA5C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAhCR,SACEC,EADF,GAGc,IADVL,EACS,EADTA,SAAUE,EACD,EADCA,WAERI,EAAa,YAAOD,GAqBxB,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EAASe,UACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAASiB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXX,IACFI,EAAgBA,EAAcQ,WAGzBR,EAOcS,CAAiBnB,EAAiB,CAAEI,WAAUE,eAEnE,OAEE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,UACtB,CAAE,WAAYlB,IAAaL,EAASe,YACtCS,QAAS,kBAAMlB,EAAYN,EAASe,YAJtC,iCASA,wBACEO,KAAK,SACLD,UAAWE,IAAG,SAAU,aACtB,CAAE,WAAYlB,IAAaL,EAASiB,SACtCO,QAAS,kBAAMlB,EAAYN,EAASiB,SAJtC,4BASA,wBACEK,KAAK,SACLD,UAAWE,IAAG,SAAU,aACtB,CAAE,YAAahB,IACjBiB,QAAS,kBAAMhB,GAAcD,IAJ/B,sBASEF,GAAYE,IACZ,wBACEe,KAAK,SACLD,UAAWE,IAAG,SAAU,YAAa,YACrCC,QAAS,WACPlB,EAAYN,EAASI,SACrBI,GAAa,IALjB,sBAaJ,6BACGC,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YC3GlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.58e25ba7.chunk.js","sourcesContent":["import { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Alphabeth = 'alphabetically',\n  Length = 'length',\n  Default = '',\n}\n\ninterface SortingFiltres {\n  sortType: SortType;\n  isReversed: boolean;\n}\n\nfunction getPreparedGoods(\n  goods: string [],\n  { sortType, isReversed } : SortingFiltres,\n): string [] {\n  let preparedGoods = [...goods];\n\n  if (sortType) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortType) {\n        case SortType.Alphabeth:\n          return good1.localeCompare(good2);\n\n        case SortType.Length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods = preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.Default);\n  const [isReversed, setIsReverse] = useState(false);\n  // eslint-disable-next-line max-len\n  const visibleGoods = getPreparedGoods(goodsFromServer, { sortType, isReversed });\n\n  return (\n\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info',\n            { 'is-light': sortType !== SortType.Alphabeth })}\n          onClick={() => setSortType(SortType.Alphabeth)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success',\n            { 'is-light': sortType !== SortType.Length })}\n          onClick={() => setSortType(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning',\n            { 'is-light': !isReversed })}\n          onClick={() => setIsReverse(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(sortType || isReversed) && (\n          <button\n            type=\"button\"\n            className={cn('button', 'is-danger', 'is-light')}\n            onClick={() => {\n              setSortType(SortType.Default);\n              setIsReverse(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}